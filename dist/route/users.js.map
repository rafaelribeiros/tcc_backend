{"version":3,"sources":["../../src/route/users.js"],"names":["express","require","router","Router","User","bcrypt","post","req","res","next","console","log","body","email","password","firstname","lastname","birth","street","neighborhood","city","state","postal_code","hashSync","Date","newUser","save","err","json","action","message","status","code","user","put","updatedUser","findById","_id","data","username","sex","type","delete","user_id","id","remove","get","find","docs","params","joe","Math","round","random","users","i","hasOwnProperty","element","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\nconst User = require('model/User');\r\nconst bcrypt = require('bcrypt-nodejs');\r\n\r\n// CRUD methods\r\n// Create User //\r\nrouter.post('/create', (req, res, next) => {\r\n  console.log(req.body);\r\n  // let username = req.body.username;\r\n  let email = req.body.email;\r\n  let password = req.body.password;\r\n\r\n  let firstname = req.body.firstname;\r\n  let lastname = req.body.lastname;\r\n  let birth = req.body.birth;\r\n\r\n  let street = req.body.street;\r\n  let neighborhood = req.body.neighborhood;\r\n  let city = req.body.city;\r\n  let state = req.body.state;\r\n  let postal_code = req.body.postal_code\r\n\r\n  // Hashing password\r\n  password = bcrypt.hashSync(password);\r\n\r\n  // Date convert\r\n  birth = new Date(birth);\r\n\r\n  let newUser = new User({\r\n    // username: username,\r\n    email: email,\r\n    password: password,\r\n    firstname: firstname,\r\n    lastname: lastname,\r\n    // birth: birth,\r\n    city: city,\r\n    state: state,\r\n  });\r\n  newUser.save((err) => {\r\n    if (err) {\r\n      return res.json({\r\n        action: \"Error: \" + err.message,\r\n        status: 'error',\r\n        code: 444\r\n      });\r\n    } else {\r\n      return res.json({\r\n        action: 'New User created',\r\n        user: newUser,\r\n        status: 'ok',\r\n        code: 200\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n// Update User //\r\nrouter.put('/update', (req, res, next) => {\r\n  // console.log(req.body);\r\n\r\n  let updatedUser = req.body;\r\n\r\n  console.log(updatedUser);\r\n\r\n  User.findById(updatedUser._id, (err, data) => {\r\n    if (err) {\r\n      return res.json({\r\n        action: \"Error: \" + err.message,\r\n        status: 'error',\r\n        code: 444\r\n      });\r\n    }\r\n\r\n    let user = data;\r\n\r\n    console.log(user);\r\n\r\n    let username = updatedUser.username;\r\n    let email = updatedUser.email;\r\n    let password = updatedUser.password;\r\n\r\n    let firstname = updatedUser.firstname;\r\n    let lastname = updatedUser.lastname;\r\n    let sex = updatedUser.sex;\r\n    let birth = updatedUser.birth;\r\n\r\n    let street = updatedUser.street;\r\n    let neighborhood = updatedUser.neighborhood;\r\n    let city = updatedUser.city;\r\n    let postal_code = updatedUser.postal_code;\r\n\r\n    let type = updatedUser.type;\r\n    let status = updatedUser.status;\r\n\r\n    // Birth\r\n    birth = new Date(birth);\r\n\r\n    user.username = username;\r\n    user.email = email;\r\n    user.password = password;\r\n\r\n    user.firstname = firstname;\r\n    user.lastname = lastname;\r\n    user.sex = sex;\r\n    user.birth = birth;\r\n\r\n    user.street = street;\r\n    user.neighborhood = neighborhood;\r\n    user.city = city;\r\n    user.postal_code = postal_code;\r\n\r\n    user.type = type;\r\n    user.status = status;\r\n\r\n    user.save((err) => {\r\n      if (err) {\r\n        return res.json({\r\n          action: \"Error: \" + err.message,\r\n          status: 'error',\r\n          code: 444\r\n        });\r\n      } else {\r\n        return res.json({\r\n          action: 'User updated',\r\n          user: user,\r\n          status: 'ok',\r\n          code: 200\r\n        });\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n// Delete User // \r\nrouter.delete('/delete', (req, res, next) => {\r\n  let user_id = req.body.id;\r\n  User.findById(user_id, (err, data) => {\r\n    if (err) {\r\n      return res.json({\r\n        action: \"Error: \" + err.message,\r\n        status: 'error',\r\n        code: 444\r\n      });\r\n    }\r\n    let user = data;\r\n\r\n    user.remove((err) => {\r\n      if (err) {\r\n        return res.json({\r\n          action: \"Error: \" + err.message,\r\n          status: 'error',\r\n          code: 444\r\n        });\r\n      } else {\r\n        return res.json({\r\n          action: 'User deleted',\r\n          status: 'ok',\r\n          code: 200\r\n        });\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n// Search methods\r\n\r\n// Get all users\r\nrouter.get('/all', (req, res, next) => {\r\n  User.find({}, (err, docs) => {\r\n    if (!err) {\r\n      return res.json(JSON.stringify(docs));\r\n    } else {\r\n      return res.json({\r\n        action: \"Error: \" + err.message,\r\n        status: 'error',\r\n        code: 444\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// Get by id\r\nrouter.get('/id/:user_id', (req, res, next) => {\r\n  let user_id = req.params.user_id;\r\n\r\n  User.findById(user_id, (err, docs) => {\r\n    if (!err) {\r\n      return res.json(JSON.stringify(docs));\r\n    } else {\r\n      return res.json({\r\n        action: \"Error: \" + err.message,\r\n        status: 'error',\r\n        code: 444\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n// Test vars\r\n\r\n// Create dump for test\r\nrouter.get('/create_dump', (req, res, next) => {\r\n  let joe = new User({\r\n    username: \"Joe\" + Math.round(Math.random() * 10000),\r\n    email: \"Joe\" + Math.round(Math.random() * 10000) + \"@gmail.com\",\r\n    password: Math.round(Math.random() * 10000),\r\n\r\n    firstname: \"Joe\",\r\n    lastname: \"Dumpson\",\r\n    sex: \"male\",\r\n    birth: Math.round(Math.random() * 10) % 28 + \"/\" + Math.round(Math.random() * 10) % 12 + \"/\" + Math.round(Math.random() * 1000) % 2018,\r\n\r\n    street: \"Joe's Street\",\r\n    neighborhood: \"Joe's neighborhood\",\r\n    city: \"Joe's City\",\r\n    postal_code: \"29101105\" // Praia da Costa\r\n  });\r\n  joe.save();\r\n\r\n  return res.json({\r\n    action: 'Joe Dumpson created',\r\n    status: 'ok',\r\n    code: 200\r\n  });\r\n});\r\n\r\n// Delete All\r\nrouter.delete('/all_delete', (req, res, next) => {\r\n  User.find({}, (err, data) => {\r\n    let users = data;\r\n\r\n    for (const i in users) {\r\n      if (users.hasOwnProperty(i)) {\r\n        const element = users[i];\r\n        element.remove();\r\n      }\r\n    }\r\n\r\n    return res.json({\r\n      action: 'All Users deleted',\r\n      status: 'ok',\r\n      code: 200\r\n    });\r\n  });\r\n});\r\n\r\nmodule.exports = router;"]}